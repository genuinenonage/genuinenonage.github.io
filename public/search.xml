<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo Next 主题的标签、分类、搜索的配置</title>
      <link href="/2020/07/29/%E4%B8%BB%E9%A2%98%E7%9A%84%E6%A0%87%E7%AD%BE%E3%80%81%E5%88%86%E7%B1%BB%E3%80%81%E6%90%9C%E7%B4%A2%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/07/29/%E4%B8%BB%E9%A2%98%E7%9A%84%E6%A0%87%E7%AD%BE%E3%80%81%E5%88%86%E7%B1%BB%E3%80%81%E6%90%9C%E7%B4%A2%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="学习Next的配置"><a href="#学习Next的配置" class="headerlink" title="学习Next的配置"></a>学习Next的配置</h2><h3 id="添加标签"><a href="#添加标签" class="headerlink" title="添加标签"></a>添加标签</h3><ol><li>新建页面<br> hexo new page tags  </li><li>设置页面类型<br> title： 标签<br> data: 2020/7/29 22/33/00<br> type: “tags”  </li><li>修改菜单<br> menu:  <pre><code>home: /  archives: /archives  tags: /tags  </code></pre><h3 id="分类标签"><a href="#分类标签" class="headerlink" title="分类标签"></a>分类标签</h3></li><li>新建页面<br> hexo new page categories  </li><li>设置页面类型<br> title： 分类<br> data: 2020/7/29 22/33/00<br> type: “categories”  </li><li>修改菜单<br> menu:  <pre><code>home: /  archives: /archives  tags: /categories  </code></pre><h3 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h3></li><li>本地安装搜索插件hexo-generator-search<br> npm install hexo-generator-search –save<br>安装之后会在站点目录的public文件夹下创建search.xml文件。  </li><li>修改站点配置文件<br>在站点配置文件_config.yml中添加如下内容：<br> search:  <pre><code>path: ./public/search.xml  field: post  format: html  limit: 10000    </code></pre><ul><li>path：索引文件的路径，相对与站点根目录</li><li>field：搜索范围，默认是post  </li><li>limit：限制搜索的条目数  </li></ul></li><li>修改主题配置文件<br> local_serach:  <pre><code>enable: true  trigger: auto  top_n_per_article: 1  </code></pre>确保修改enable设成true。<br>top_n_per_article字段表示在每篇文章中显示的搜索结果数量，设成-1会显示每篇文章的所有搜索结果数量。<br>然后，需要 hexo g 生成一下本地静态文件，即可使用本地搜索功能了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> next </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>equals 与 == 的区别</title>
      <link href="/2020/07/29/equals%20%E4%B8%8E%20==/"/>
      <url>/2020/07/29/equals%20%E4%B8%8E%20==/</url>
      
        <content type="html"><![CDATA[<ol><li>equals方法对于字符串来说是比较内容的，对于非字符串来说是比较 其指向的对象是否相同。  </li><li>== 比较的 其指向的对象是否相同，也就是对象在内存中的首地址。（Java中对象的首地址是 它的内存中存放的起始地址，后面的地址是用来存放他所包含的各个属性的地址，内存中会用多个内存块来存放对象的各个参数，而通过这个首地址就可以找到该对象，进而可以找到该对象的各个属性。）<br>String类中重新定义了equals方法，比较的是值。  </li><li>如果比较基本类型，只能用 == 比较，不能用equals  </li><li>对于基本类型的包装类型， == 比较地址，equals比较内容。<br>（Object类中的equals方法使用来比较地址的，其他对象需要重写equals方法。）</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github拉取远端分支到本地</title>
      <link href="/2020/07/19/github%E6%8B%89%E5%8F%96%E8%BF%9C%E7%AB%AF%E5%88%86%E6%94%AF%E5%88%B0%E6%9C%AC%E5%9C%B0/"/>
      <url>/2020/07/19/github%E6%8B%89%E5%8F%96%E8%BF%9C%E7%AB%AF%E5%88%86%E6%94%AF%E5%88%B0%E6%9C%AC%E5%9C%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="github-拉取远端分支到本地"><a href="#github-拉取远端分支到本地" class="headerlink" title="github 拉取远端分支到本地"></a>github 拉取远端分支到本地</h2><ol><li>新建一个文件夹</li><li>初始化，在 git base 中输入<blockquote><p>git init</p></blockquote></li><li>与远端master建立链接<blockquote><p>git remote add origin 仓库链接地址<a href="https://github.com/xx/xx.git" target="_blank" rel="noopener">https://github.com/xx/xx.git</a><br>//如果第一遍输入错误，可以输入 git remode rm origin ，删除上一步的操作之后重新输入  </p></blockquote></li><li>把远程分支拉到本地<blockquote><p>git fetch origin dev(dev为远程仓库的分支名)</p></blockquote></li><li>切换到分支<blockquote><p>git checkout dev(dev为远程仓库的分支名)</p></blockquote></li><li>以后每次使用时最好先：把分支的最新内容拉取到本地<blockquote><p>git pull origin dev(远程分支名)</p></blockquote></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>轻量级与重量级</title>
      <link href="/2020/07/17/%E8%BD%BB%E9%87%8F%E7%BA%A7%E4%B8%8E%E9%87%8D%E9%87%8F%E7%BA%A7/"/>
      <url>/2020/07/17/%E8%BD%BB%E9%87%8F%E7%BA%A7%E4%B8%8E%E9%87%8D%E9%87%8F%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<p>轻量级与重量级<br>两者是一个相对概念，主要是对应 应用框架的使用方便性和所提供的服务特性等方面作比较。<br>比如：<br>EJB是重量级框架：对编写的代码有限制，同时提供了分布式等复杂的功能。<br>Spring是轻量级框架：只需要普通的Java对象，提供中小应用使用的功能。</p><p>划分一个应用是否属于轻量级还是重量级，主要看使用了多少服务。<br>使用的服务越多，容器要为普通Java对象做的工作越多，必然会影响到应用的发布时间或运行性能。<br>对于spring容器，提供了很多服务，但这些服务不是默认打开的，应用需要某种服务，需指明使用该服务。如果应用使用的服务很少，如：只使用了spring核心服务，可以认为此时应用属于轻量级的；如果应用使用了spring提供的大部分服务，这是应用就属于重量级。EJB容器就因为他默认为应用提供了EJB规范中所有的功能，所以属于重量级。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>架构，构件，组件，框架，中间件</title>
      <link href="/2020/07/17/%E6%9E%B6%E6%9E%84%EF%BC%8C%E6%9E%84%E4%BB%B6%EF%BC%8C%E7%BB%84%E4%BB%B6%EF%BC%8C%E6%A1%86%E6%9E%B6%EF%BC%8C%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2020/07/17/%E6%9E%B6%E6%9E%84%EF%BC%8C%E6%9E%84%E4%BB%B6%EF%BC%8C%E7%BB%84%E4%BB%B6%EF%BC%8C%E6%A1%86%E6%9E%B6%EF%BC%8C%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="架构，构件，组件，框架，中间件"><a href="#架构，构件，组件，框架，中间件" class="headerlink" title="架构，构件，组件，框架，中间件"></a>架构，构件，组件，框架，中间件</h2><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>中间件是一种独立的系统软件或服务程序，分布式应用软件借助它在不同的技术之间 共享资源。<br>中间件位于客户机/服务器的操作系统上，管理计算机资源和网络通信。连接两个独立应用程序或独立系统的软件。<br>相连接的系统具有不同的接口也能交换信息。<br>执行中间件是介于操作系统和应用软件之间，为应用软件提供服务功能的软件，有消息中间件，交易中间件，应用服务器等。</p><p>####### 中间件是一种计算机软件连接了软件部件或应用程序。这种软件有一组服务构成，这些服务包括允许多进程运行在一个或多个机器上以达到在网络中互相交互的目的。</p><p>####### 中间件的分类<br>IDC的分类：</p><ol><li>终端仿真/屏幕转换</li><li>数据访问</li><li>远程过程调用</li><li>消息中间件</li><li>交易中间件</li><li>对象中间件</li></ol><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>一个具备完备功能的服务接口，可以使用一个组件构建一个系统。</p><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>构成一类特定可复用设计的一组相互协作的类，框架规定了你的应用程序的体系结构。<br>它定义了整体结构，类和对象的分割，各部分的主要责任，类和对象怎么协作，以及控制流程。<br>实现者无需考虑框架层已经实现好的设计，只要按照开发的要求设计就可以了，然后把开发好的东西放到框架中就可以了。框架一般是成熟的，不断升级的软件。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一点点git的简单使用-随时更新</title>
      <link href="/2020/07/15/%E4%B8%80%E7%82%B9%E7%82%B9git%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8-%E9%9A%8F%E6%97%B6%E6%9B%B4%E6%96%B0/"/>
      <url>/2020/07/15/%E4%B8%80%E7%82%B9%E7%82%B9git%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8-%E9%9A%8F%E6%97%B6%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="个性使用"><a href="#个性使用" class="headerlink" title="个性使用"></a>个性使用</h4><ol><li>删除本地分支<blockquote><p>git branch -d dev(分支名)  </p></blockquote></li><li>取消目录的git初始化  <blockquote><p>rm -rf.git  </p></blockquote></li><li>克隆想要的分支到本地  <blockquote><p>git clone –branch dev(分支名) <a href="https://github.com/xx/xx.git" target="_blank" rel="noopener">https://github.com/xx/xx.git</a>  </p></blockquote></li></ol><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ol><li>初始化本地仓库  <blockquote><p>git init git_work(仓库文件夹名称) &amp;&amp; cd git_work  </p></blockquote></li><li>将变化提交到暂存区  <blockquote><p>git add .  </p></blockquote></li><li>将本地暂存提交到版本库  <blockquote><p>git commit -m “提交说明”  </p></blockquote></li><li>本地推送到远端分支  <blockquote><p>git push origin dev(分支名)  </p></blockquote></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GitHub拉取分支单独文件或文件夹</title>
      <link href="/2020/07/14/GitHub%E6%8B%89%E5%8F%96%E5%88%86%E6%94%AF%E5%8D%95%E7%8B%AC%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
      <url>/2020/07/14/GitHub%E6%8B%89%E5%8F%96%E5%88%86%E6%94%AF%E5%8D%95%E7%8B%AC%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
      
        <content type="html"><![CDATA[<ol><li>选择放置git仓库的文件夹，创建并初始化git本地仓库  <blockquote><p>git init dev_work &amp;&amp; cd dev_work  </p></blockquote></li><li>关联远端地址<blockquote><p>git remote add -f origin <a href="https://github.com/xx/xx.git" target="_blank" rel="noopener">https://github.com/xx/xx.git</a>  </p></blockquote></li><li>开启git的 Sparse Checkout 模式（该模式专门用于git检出指定目录或文件，在config中配置）  <blockquote><p>git config core.sparsecheckout true  </p></blockquote></li><li>设置需要拉取github上的文件目录<blockquote><p>//这些目录写在了.git/info/sparse-check文件中。<br>echo “source/posts(github上的目录或文件路径)” &gt;&gt; .git/info/sparse-check<br>echo “css/fonts(可以写多个)” &gt;&gt; .git/info/sparse-check </p></blockquote></li><li>从GitHub上拉取下来<blockquote><p>git pull origin dev(对应分支名)   </p></blockquote></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库恢复与备份</title>
      <link href="/2020/07/14/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E6%81%A2%E5%A4%8D%E4%B8%8E%E5%A4%87%E4%BB%BD/"/>
      <url>/2020/07/14/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E6%81%A2%E5%A4%8D%E4%B8%8E%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<h3 id="恢复impdp"><a href="#恢复impdp" class="headerlink" title="恢复impdp"></a>恢复impdp</h3><ol><li>在本地创建表空间<blockquote><p>CREATE TABLESPACE NNC_DATA01(表空间名) DATAFILE ‘E:\tablespace\nncdata01.dbf’(地址及bdf文件名) SIZE 1000M(表空间大小) AUTOEXTEND ON NEXT 50M(自动扩展空间大小) EXTENT MANAGEMENT LOCAL UNIFORM SIZE 256K;</p></blockquote></li><li>创建用户<blockquote><p>create user yonghuming(设置用户名) identified by mima(设置密码) default tablespace NNC_DATA01(创建的表空间名) temporary tablespace temp;</p></blockquote></li><li>给用户授权：<blockquote><p>grant connect,resource to yonghuming;<br>grant create session to yonghuming;<br>grant MANAGE SCHEDULER to yonghuming;<br>grant CREATE VIEW to yonghuming;<br>grant CREATE JOB to yonghuming;<br>grant UNLIMITED TABLESPACE to yonghuming;<br>grant dba to yonghuming;    //这个必须有  </p></blockquote></li><li>创建 导入数据库的存放目录，用于impdp，如果存在了就不用创建了。  <blockquote><p>select * from dba_directories;<br>create or replace directory dir as ‘D:\importdir’;  </p></blockquote></li><li>cmd导入库数据泵  <blockquote><p>impdp yonghuming(目标库用户名)/(目标库用户相应的密码)@orcl   DIRECTORY=importdir(地址目录变量)  dumpfile=OK051501BAK0628.DMP(需要导入的库文件)  remap_schema=OK051501(原库用户名):yonghuming(目标库用户名)  logfile=dtey20200628_dtey200706.log(日志文件名)  TABLE_EXISTS_ACTION=TRUNCATE;   </p></blockquote><h3 id="备份expdp"><a href="#备份expdp" class="headerlink" title="备份expdp"></a>备份expdp</h3></li><li>cmd导出数据库<blockquote><p>//–先查询一下存放的路径<br>select * from dba_directories;<br>expdp okdemo(原用户名)/okmima(原用户密码)@orcl schemas=okdemo(原用户名) dumpfile=okdemobak0714.dmp(导出数据库文件名) logfile=okdemobak0714.log(日志文件名) directory=dir(数据库文件和日志文件存放地址变量);</p></blockquote></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Navicat 链接远端Oracle数据库</title>
      <link href="/2020/07/13/Navicat%20%E9%93%BE%E6%8E%A5%E8%BF%9C%E7%AB%AFOracle%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2020/07/13/Navicat%20%E9%93%BE%E6%8E%A5%E8%BF%9C%E7%AB%AFOracle%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>Oracle官网下载Oracle的客户端 install client。<br>官网地址：<a href="https://www.oracle.com/database/technologies/instant-client/winx64-64-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/database/technologies/instant-client/winx64-64-downloads.html</a></p><p>我下载的是：instantclient-basic-windows.x64-19.6.0.0.0dbru.zip</p><p>我解压到：D:\Oracle\instantclient_19_6</p><p>在这个目录下新建sqlnet.ora和tnsnames.ora两个文件<br>sqlnet.ora文件内容<br>　　SQLNET.AUTHENTICATION_SERVICES= (NTS)<br>　　NAMES.DIRECTORY_PATH= (TNSNAMES, EZCONNECT)<br>tnsnames.ora文件内容<br>　　orcl =<br>　　　　(DESCRIPTION =<br> 　　　　 (ADDRESS_LIST =<br>   　　　　 (ADDRESS = (PROTOCOL = TCP)(HOST = <strong><em>192.168.146.143</em></strong> )(PORT = 1521))<br>  　　　　　　)<br> 　　　　　 (CONNECT_DATA =<br>    　　　　　    (SERVICE_NAME = <strong>orcl</strong> )<br>  　　　　　　)<br>　　　　　)<br>　注：粗体部分需要按需配置，如果端口是自定义的也需要相应变更。</p><p>设置系统变量</p><ol><li>变量名：ORACLE_HOME<br>变量值：D:\Oracle\instantclient_19_6  </li><li>变量名：TNS_ADMIN<br>变量值：D:\Oracle\instantclient_19_6  </li><li>变量名：NLS_LANG<br>变量值：SIMPlIFIED CHINESE_CHINA.ZHS16GBK  </li><li>修改Path变量<br>添加D:\Oracle\instantclient_19_6   <h3 id="安装Nevicat"><a href="#安装Nevicat" class="headerlink" title="安装Nevicat"></a>安装Nevicat</h3>通过Tools（工具）-&gt;Options-&gt; Miscellaneous -&gt; OCI  将Nevicat的oci.dll更改为Oracle客户端的oci.dll</li></ol><p>一切准备完成，可以直接用Nevicat链接远端Oracle数据库了。<br>我看的是两个人不同操作，有的步骤可能多余，我也不想再仔细研究了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构知识点总结-更新中</title>
      <link href="/2020/07/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E6%9B%B4%E6%96%B0%E4%B8%AD/"/>
      <url>/2020/07/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E6%9B%B4%E6%96%B0%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><p>当一个数组中大部分元素为0，或者为同一个值的数组时，可以使用稀疏数组来保存。<br>处理方法：  </p><ol><li>记录数组一共有几行几列，有多少个不同的值。  </li><li>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模。</li></ol><h4 id="二维数组转稀疏数组的思路："><a href="#二维数组转稀疏数组的思路：" class="headerlink" title="二维数组转稀疏数组的思路："></a>二维数组转稀疏数组的思路：</h4><ol><li>遍历 原始的二维数组，得到有效数据的个数sum。</li><li>根据sum 创建稀疏数组sparseArr  int[sum+1][3]</li><li>将二维数组的有效数据存入到稀疏数组</li></ol><h4 id="稀疏数组转原始的二维数组的思路："><a href="#稀疏数组转原始的二维数组的思路：" class="headerlink" title="稀疏数组转原始的二维数组的思路："></a>稀疏数组转原始的二维数组的思路：</h4><ol><li>先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组， chessArr2 = int[11][11]  </li><li>在读取稀疏数组后几行的数据，并赋给原始的二维数组。</li></ol><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><h3 id="单向环形链表"><a href="#单向环形链表" class="headerlink" title="单向环形链表"></a>单向环形链表</h3><h4 id="构建思路"><a href="#构建思路" class="headerlink" title="构建思路"></a>构建思路</h4><ol><li>创建第一个节点，形成自环</li><li>创建新的节点，加入环形链表中<br>先前一个.next-&gt;newboy<br>在newboy.next-&gt;first</li></ol><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><pre><code>1. 先辅助指针curboy执行first节点2. while直到curboy.next == first 结束</code></pre><h4 id="解决问题-约瑟夫问题"><a href="#解决问题-约瑟夫问题" class="headerlink" title="解决问题-约瑟夫问题"></a>解决问题-约瑟夫问题</h4><ol><li>创建节点类</li><li>创建单向环形链表</li><li>约瑟夫小孩出圈<ul><li>创建辅助指针helper，先执行环最后一个节点</li><li>first和helper同时移动m-1次</li><li>first指向的小孩出圈  <ul><li>first = first.next</li><li>helper.next = first</li></ul></li></ul></li></ol><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ol><li>数组模拟</li><li>top属性表示栈顶，初始化-1，表示没有数据</li><li>入栈的操作，当有数据加入栈，top++；stack[top]]=data;</li><li>出栈，int value = stack[top];top–,return value;</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建hexo个人博客</title>
      <link href="/2020/07/05/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/07/05/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="简要搭建hexo个人博客"><a href="#简要搭建hexo个人博客" class="headerlink" title="简要搭建hexo个人博客"></a>简要搭建hexo个人博客</h2><ul><li>首先电脑里要有Node.js(要选择安装upm)和git的应用程序。<br>接下来在cmd中操作即可。</li><li>cmd中输入<blockquote><p>npm install -g hexo-cli</p></blockquote></li><li>安装hexo  </li><li>选择合适的博客存放文件夹，输入<blockquote><p>hexo init blog </p></blockquote></li><li>等待初始化。<blockquote><p>cd blog<br>hexo s</p></blockquote></li><li>启动服务，可以在浏览器中看到个人博客，地址：localhost:4000/</li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>清理一下，清理缓存和已生成的静态文件</p><blockquote><p>hexo clean</p></blockquote><p>生成一下</p><blockquote><p>hexo g  </p></blockquote><p>启动一下</p><blockquote><p>hexo s</p></blockquote><h3 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h3><ul><li>在github创建仓库，命名有强制要求：<blockquote><p>//例如：nicheng.github.io<br>你的昵称+  .github.io</p></blockquote></li><li>更改_config.yml 文件<blockquote><p>deploy:</p><blockquote><p>type: git<br>repo: 仓库地址<br>branch: master</p></blockquote></blockquote></li><li>部署到github上,cmd输入:<blockquote><p>npm install –save hexo-deplover-git<br>hexo d</p></blockquote></li><li>输入昵称密码</li><li>部署成功，浏览器访问 你的昵称.github.io</li></ul><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><ul><li>卸载hexo<br>  npm uninstall hexo-cli -g<br>然后再文件夹中的blog，手动卸载。<br>注意：进行重装之前，如果还是在原来的位置上，必须手动清理了才能再次安装。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
